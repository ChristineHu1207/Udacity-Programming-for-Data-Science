1
00:00:00,230 --> 00:00:05,365
So far, we've applied these aggregation functions across an entire table.

2
00:00:05,365 --> 00:00:09,054
You now know how to count all the records in a given table.

3
00:00:09,054 --> 00:00:13,449
But you might want to count records across multiple subsets of data.

4
00:00:13,449 --> 00:00:15,719
For example, as a sales manager,

5
00:00:15,720 --> 00:00:20,810
you might want to sum all of the sales of each paper type for each account.

6
00:00:20,809 --> 00:00:23,339
GROUP BY allows you to create segments that will

7
00:00:23,339 --> 00:00:26,019
be aggregated independently of one another.

8
00:00:26,019 --> 00:00:29,429
In other words, GROUP BY allows you to take the sum of

9
00:00:29,429 --> 00:00:34,048
data limited to each account rather than across the entire dataset.

10
00:00:34,048 --> 00:00:37,229
Let's work our way toward this answer by starting with the sums of

11
00:00:37,229 --> 00:00:41,564
the quantities of each type of paper.

12
00:00:41,564 --> 00:00:45,679
Now, we want to create a separate set of sums for each account id.

13
00:00:45,679 --> 00:00:49,450
So, let's add the account id column into our Select statement.

14
00:00:49,450 --> 00:00:52,710
As you can see, this returns an error.

15
00:00:52,710 --> 00:00:55,054
As we aggregate in this query,

16
00:00:55,054 --> 00:00:58,195
we're effectively collapsing the number of rows returned.

17
00:00:58,195 --> 00:01:00,179
In our previous query,

18
00:01:00,179 --> 00:01:02,950
we collapsed all the way down to a single row.

19
00:01:02,950 --> 00:01:04,950
The reason we're getting an error here,

20
00:01:04,950 --> 00:01:08,010
is that we've included the account id column but

21
00:01:08,010 --> 00:01:11,670
this column isn't being collapsed like the columns that are being aggregated.

22
00:01:11,670 --> 00:01:14,790
The query isn't sure whether to sum the account

23
00:01:14,790 --> 00:01:17,775
id as well or whether to make it into a grouping.

24
00:01:17,775 --> 00:01:21,344
We have to be explicit about this.

25
00:01:21,344 --> 00:01:24,484
We want to tell the query to aggregate into segments

26
00:01:24,484 --> 00:01:28,780
where each segment is one of the values in the account id column.

27
00:01:28,780 --> 00:01:37,859
We'll do this using the GROUP BY clause.

28
00:01:37,859 --> 00:01:41,655
You can see that this isn't ordered intuitively, so let's fix that.

29
00:01:41,655 --> 00:01:43,670
The GROUP BY clause always goes between

30
00:01:43,670 --> 00:01:49,329
the WHERE clause if there is one and the ORDER BY clause.

31
00:01:51,840 --> 00:01:57,534
Whenever there's a field in the Select statement that's not being aggregated,

32
00:01:57,534 --> 00:02:00,424
the query expects it to be in the GROUP BY clause.

33
00:02:00,424 --> 00:02:02,780
A column that's not aggregated and not in

34
00:02:02,780 --> 00:02:06,284
the GROUP BY will return the error we saw before.

35
00:02:06,284 --> 00:02:11,344
This is pretty important and it's the key to correctly using GROUP BY statements.

36
00:02:11,344 --> 00:02:13,430
Again, you should always see any columns in

37
00:02:13,430 --> 00:02:18,000
the select statement that are not being aggregated on, in the GROUP BY statement.

